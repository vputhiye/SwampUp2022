pipelines:
  - name: sup_008_frontapp_npm_pipeline
    steps:
      - name: build_npm_frontend
        type: NpmBuild
        configuration:
          npmArgs: '--no-progress --no-audit'
          affinityGroup: together
          repositoryName: sup008-npm-virtual
          sourceLocation: SUP008-From-Git-To-Kubernetes/front/
          integrations:
            - name: artifactory
          inputResources:
            - name: source_code
        execution:
          onSuccess:
            - echo ${res_source_code_isGitTag}
            - appVersion=`if [[ ${res_source_code_isGitTag} == "True" ]]; then echo ${res_source_code_gitTagName}; else echo ${res_source_code_commitSha}; fi`
            - echo $appVersion
            - add_pipeline_variables appVersion="${appVersion}"
            - add_pipeline_variables subPath="${res_source_code_branchName}/${appVersion}"
            - mkdir -p $shared_workspace/npmBuildInputGitRepo
            - cp -r $res_source_code_resourcePath/* $shared_workspace/npmBuildInputGitRepo/
            - rm -rf $steplet_run_state_dir/npmBuildInputGitRepo


      - name: npm_package_frontend
        type: Bash
        configuration:
          affinityGroup: together
          environmentVariables:
            OFFLINE_MODE: "true"
          inputSteps:
            - name: build_npm_frontend
          integrations:
            - name: artifactory
        execution:
          onExecute:
            - cd $shared_workspace/npmBuildInputGitRepo/
            - echo "Run Unit Testing ..."
            - if [ $OFFLINE_MODE == "true" ]; then echo "Offline mode turned on";fi
            - ls -la
            # - restore_run_files $build_npm_frontend_sourceStateName .
            - cd SUP008-From-Git-To-Kubernetes/front
            - ls -la
            - npm run build

      - name: publish_frontend
        type: NpmPublish
        configuration:
          affinityGroup: together
          environmentVariables:
            inputNpmBuildStepName: build_npm_frontend
          repositoryName: sup008-npm-virtual
          inputSteps:
            - name: npm_package_frontend
          integrations:
            - name: artifactory
        execution:
          onStart:
            - mkdir -p $steplet_run_state_dir/npmBuildInputGitRepo
            - cp -r $shared_workspace/npmBuildInputGitRepo $steplet_run_state_dir
          onComplete:
            - rm -rf $steplet_run_state_dir/npmBuildInputGitRepo

      - name: publish_frontend_buildinfo
        type: PublishBuildInfo
        configuration:
          affinityGroup: together
          inputSteps:
            - name: publish_frontend
          outputResources:
            - name: build_info_frontapp

      - name: xray_scan_npm_front_app
        type: XrayScan
        configuration:
          affinityGroup: together
          failOnScan: true
          inputSteps:
            - name: publish_frontend_buildinfo
          inputResources:
            - name: build_info_frontapp

      - name: promote_build_info_npm_frontapp
        type: PromoteBuild
        configuration:
          affinityGroup: together
          targetRepository: sup008-npm-prod-local
          includeDependencies: false
          status: SANDBOX_OK
          comment: Unit testing and Xray scan passed succesfully
          copy: true
          inputSteps:
            - name: xray_scan_npm_front_app
          inputResources:
            - name: build_info_frontapp
              trigger: true
          outputResources:
            - name: build_info_frontapp_promoted_staging
        execution:
          onStart:
            - echo ${res_build_info_frontapp_buildName}
            - echo ${res_build_info_frontapp_buildNumber}
            - echo ${appVersion}
          onSuccess:
            - write_output build_info_frontapp_promoted_staging myversion=${appVersion}
            - jfrog rt sp --build=${res_build_info_frontapp_buildName}/${res_build_info_frontapp_buildNumber} sup008-npm-prod-local/ "app.version=${appVersion}"

  - name: sup_008_frontapp_docker_pipeline
    configuration:
      environmentVariables:
        readOnly:
          dockerImageTagVersion: 1.0.${run_number}-${res_source_code_commitSha}
    steps:
      - name: build_docker_frontapp
        type: DockerBuild
        configuration:
          affinityGroup: swampupgrp
          dockerFileName: Dockerfile
          dockerFileLocation: SUP008-From-Git-To-Kubernetes/front/
          dockerImageName: ${int_server_name_value}.jfrog.io/sup008-docker-virtual/frontapp
          dockerImageTag: ${dockerImageTagVersion}
          dockerOptions: --build-arg SERVER_NAME=${int_server_name_value}
          inputResources:
            - name: source_code
            - name: build_info_frontapp_promoted_staging
            - name: frontapp_exec
          integrations:
            - name: artifactory
            - name: docker
            - name: server_name
        execution:
          onStart:
            - cp ${res_frontapp_exec_resourcePath}/front* ${res_source_code_resourcePath}/SUP008-From-Git-To-Kubernetes/front/
            - cd ${res_source_code_resourcePath}/SUP008-From-Git-To-Kubernetes/front/
            - tar xvf front*.tgz
            - ls -l ${res_source_code_resourcePath}/SUP008-From-Git-To-Kubernetes/front/

      - name: publish_docker_frontapp
        type: DockerPush
        configuration:
          affinityGroup: swampupgrp
          targetRepository: sup008-docker-virtual
          autoPublishBuildInfo: true
          inputSteps:
            - name: build_docker_frontapp
          integrations:
            - name: artifactory
          outputResources:
            - name: build_info_docker_frontapp

      - name: xray_scan_docker_build_info_front_app
        type: XrayScan
        configuration:
          affinityGroup: swampupgrp
          failOnScan: true
          inputSteps:
            - name: publish_docker_frontapp
          inputResources:
            - name: build_info_docker_frontapp

      - name: promote_docker_build_info_frontapp
        type: PromoteBuild
        configuration:
          affinityGroup: swampupgrp
          targetRepository: sup008-docker-prod-local
          includeDependencies: false
          status: "DOCKER_SCAN_OK"
          comment: "Xray scan passed succesfully"
          copy: true
          integrations:
            - name: artifactory
          inputSteps:
            - name: xray_scan_docker_build_info_front_app
          inputResources:
            - name: build_info_docker_frontapp
              trigger: true
          outputResources:
            - name: build_info_docker_frontapp_promoted_staging
        execution:
          onSuccess:
            - jfrog rt sp --build=${res_build_info_docker_frontapp_buildName}/${res_build_info_docker_frontapp_buildNumber} app-docker-rc-local/**/manifest.json "docker.tag=${dockerImageTagVersion}"
            - write_output build_info_docker_frontapp_promoted_staging "frontregistry=\"${ArtIP}/docker\""
            - write_output build_info_docker_frontapp_promoted_staging "frontimage=\"frontapp\""
            - write_output build_info_docker_frontapp_promoted_staging "fronttag=${dockerImageTagVersion}"

      - name: publish_helm_chart
        type: HelmPublish
        configuration:
          helmVersion: 3
          lint: true
          inputResources:
            - name: source_code
          inputSteps:
            - name: promote_docker_build_info_frontapp
          outputResources:
            - name: spring_helm_chart_front_app_resource
          chartPath: SUP008-From-Git-To-Kubernetes/front/chart
          flags: --app-version=${build_docker_frontapp_dockerImageTag} --version 1.0.${run_number}
